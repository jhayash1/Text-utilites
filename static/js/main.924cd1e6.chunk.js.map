{"version":3,"sources":["component/Alert.js","component/Navbar.js","component/TextForm.js","App.js","serviceWorker.js","index.js"],"names":["Alert","props","console","log","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","alert","className","type","role","msg","data-bs-dismiss","aria-label","Navbar","mode","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","value","color","onChange","toggleColor","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","heading","newText","showAlert","lowerText","SpeechSynthesisUtterance","window","speechSynthesis","speak","split","map","currentValue","join","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","rows","event","target","length","defaultProps","App","setAlert","setColor","message","setTimeout","setMode","backgroundColor","e","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.924cd1e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  console.log(capitalize('bhbdsh'))\r\n  // const capitalize = (sentence) => {\r\n  //   let words = sentence.split(' ');\r\n  //   let newWords = words.map(word => {\r\n  //     return word.charAt(0).toUpperCase() + word.slice(1);\r\n  //   });\r\n  //   return newWords.join(' ')\r\n  // }\r\n  return (\r\n    props.alert && <div>\r\n         <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  // const [colorHexCode, setColorHexCode] = useState('#000000');\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a  className=\"navbar-brand\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" >Home</a>\r\n            </li>\r\n            \r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <input type=\"color\" className=\"form-control form-control-color\" value={props.color} onChange={props.toggleColor}></input>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Switch Mode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string}\r\nNavbar.defaultProps = {title: 'React Js'}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  \r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Convert to uppercase', 'success')\r\n  };\r\n  const handleLowerClick = () => {\r\n    let lowerText = text.toLowerCase();\r\n    setText(lowerText);\r\n    props.showAlert('Convert to Lowecase', 'success')\r\n  };\r\n  const handleClear = () => {\r\n    let lowerText = '';\r\n    setText(lowerText);\r\n    props.showAlert('Clear', 'success')\r\n\r\n  };\r\n  const handleOnClick = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const downloadTxtFile = () => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([text], {\r\n      type: \"text/plain\"\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myFile.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n  const speak = () => {\r\n\r\n    let msg = new SpeechSynthesisUtterance();\r\n  \r\n    msg.text = text;\r\n  \r\n    window.speechSynthesis.speak(msg);\r\n    props.showAlert('Speak', 'success')\r\n\r\n  \r\n  }\r\n  const intoTitleCase = () => {\r\n\r\n    let newText = text.split(\" \").map((currentValue) => {\r\n\r\n        let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n\r\n        return newText;\r\n        \r\n\r\n    });\r\n\r\n    setText(newText.join(\" \"));\r\n\r\n}\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  return (\r\n    <div>\r\n      <div className=\"mb-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n      <h1>{props.heading} </h1>\r\n      <button className=\"btn btn-outline-primary btn-sm\" onClick={handleUpClick} > Convert to uppercase </button>\r\n      <button className=\"btn btn-outline-dark btn-sm mx-1\" onClick={handleLowerClick}> Convert to Lowercase </button>\r\n      <button className=\"btn btn-outline-dark btn-sm mx-1\" onClick={handleClear}>Clear</button>\r\n      <button type=\"submit\" onClick={speak} className=\"btn btn-warning btn-sm mx-2 my-2\">Speak</button>\r\n      <button type=\"submit\" onClick={intoTitleCase} className=\"btn btn-outline-warning btn-sm mx-2 my-2\">Capitalize</button>\r\n      <button className=\"btn btn-outline-success btn-sm\"  onClick={downloadTxtFile}>Download txt</button>\r\n      <textarea className=\"form-control mt-2\" id=\"exampleFormControlTextarea1\" rows=\"10\" value={text} onChange={handleOnClick}  ></textarea>\r\n      </div>\r\n      <p className=\"mt-2\" style={{color: props.mode==='dark'?'white':'black'}}>{text.split(\" \").length} words and {text.length} Character</p>\r\n      <p style={{color: props.mode==='dark'?'white':'black'}}>{0.008 * text.split(\" \").length } Minute to read</p>\r\n      {/* <pre>\r\n             {JSON.stringify(data, null, 2)}\r\n           </pre> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\n// import About from './component/About';\nimport Alert from './component/Alert';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\n// import Home from './component/Home';\n// import State from './page/state';\n// import Props from './page/props';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [alert, setAlert] = useState('null');\n  const [color, setColor] = useState('null'); //switch\n  const showAlert = (message, type) => {\n    setAlert({\n      msg :message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n  const [mode, setMode] = useState('light')\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor= '#614295';\n      showAlert('Dark mode has enable', 'success')\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = '#fff';\n      showAlert('Light mode has enable', 'success')\n    }\n  }\n  //switch\n  const toggleColor = (e) => {\n    setColor(e.target.value);\n    document.body.style.backgroundColor = color\n  }\n  return (\n    <>\n      <Navbar mode={mode}  toggleMode={toggleMode} toggleColor={toggleColor} color={color} />  \n      <div className='container mt-3'>\n      <Alert alert={alert}/>\n      <TextForm showAlert={showAlert} heading='Enter the text to analyze below'/>\n      </div>\n    </>\n    // <Router>\n    // <div >\n    //   <div className=\"container m-5\">\n\n    //   <Alert alert={alert}/>\n    //     <Switch>\n    //       <Route path=\"/about\">\n    //         <About />\n    //       </Route>\n    //       <Route path=\"/textform\">\n    //         <TextForm />\n    //       </Route>\n    //       <Route path=\"/state\">\n    //         <State/>\n    //       </Route>\n    //       <Route path='/props'>\n    //         <Props/>\n    //       </Route>\n    //       {/* <Route path='/state'>\n    //         <State/>\n    //         </Route>\n    //         <Route path='/props'>\n    //         <Props/>\n    //       </Route> */}\n    //       <Route path=\"/\">\n    //         <Home/>\n    //       </Route>\n    //     </Switch>\n    //   </div>\n    // </div>\n    // </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}